{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DetalleComponent = class DetalleComponent {\n  constructor(route, productosService, cartService) {\n    this.route = route;\n    this.productosService = productosService;\n    this.cartService = cartService;\n    this.productDetail = null; // Store the product details\n    this.selectedImage = null; // Store the selected image\n    this.maxVisibleImages = 3; // Set the maximum number of images to display\n    this.desiredQuantity = 1; // Default value for quantity input\n  }\n\n  ngOnInit() {\n    // Get the product ID from the route parameter and fetch details\n    const productId = this.route.snapshot.paramMap.get('id');\n    if (productId) {\n      this.getProductDetail(productId);\n    }\n  }\n  // Method to fetch the product detail using the service\n  getProductDetail(productId) {\n    this.productosService.getProductDetail(productId).subscribe({\n      next: detail => {\n        this.productDetail = detail;\n        // Set the initial selected image\n        if (this.productDetail.pictures.length > 0) {\n          this.selectedImage = this.productDetail.pictures[0];\n        }\n        // Ensure desiredQuantity does not exceed initial_quantity\n        this.desiredQuantity = Math.min(this.desiredQuantity, this.productDetail.initial_quantity);\n      },\n      error: error => {\n        console.error('Error fetching product details:', error);\n      }\n    });\n  }\n  // Method to handle image selection\n  selectImage(picture) {\n    this.selectedImage = picture;\n  }\n  addToCart() {\n    if (this.productDetail && this.desiredQuantity > 0) {\n      this.cartService.addToCart(this.productDetail, this.desiredQuantity);\n      alert('Producto agregado al carrito!');\n    }\n  }\n};\nDetalleComponent = __decorate([Component({\n  selector: 'app-detalle',\n  templateUrl: './detalle.component.html',\n  styleUrls: ['./detalle.component.css']\n})], DetalleComponent);\nexport { DetalleComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAM3BC,YACUC,KAAqB,EACrBC,gBAAkC,EAClCC,WAAwB;IAFxB,UAAK,GAALF,KAAK;IACL,qBAAgB,GAAhBC,gBAAgB;IAChB,gBAAW,GAAXC,WAAW;IARrB,kBAAa,GAAQ,IAAI,CAAC,CAAC;IAC3B,kBAAa,GAAQ,IAAI,CAAC,CAAC;IAC3B,qBAAgB,GAAW,CAAC,CAAC,CAAC;IAC9B,oBAAe,GAAW,CAAC,CAAC,CAAC;EAM1B;;EAEHC,QAAQ;IACN;IACA,MAAMC,SAAS,GAAG,IAAI,CAACJ,KAAK,CAACK,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;IACxD,IAAIH,SAAS,EAAE;MACb,IAAI,CAACI,gBAAgB,CAACJ,SAAS,CAAC;;EAEpC;EAEA;EACAI,gBAAgB,CAACJ,SAAiB;IAChC,IAAI,CAACH,gBAAgB,CAACO,gBAAgB,CAACJ,SAAS,CAAC,CAACK,SAAS,CAAC;MAC1DC,IAAI,EAAGC,MAAM,IAAI;QACf,IAAI,CAACC,aAAa,GAAGD,MAAM;QAC3B;QACA,IAAI,IAAI,CAACC,aAAa,CAACC,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;UAC1C,IAAI,CAACC,aAAa,GAAG,IAAI,CAACH,aAAa,CAACC,QAAQ,CAAC,CAAC,CAAC;;QAErD;QACA,IAAI,CAACG,eAAe,GAAGC,IAAI,CAACC,GAAG,CAAC,IAAI,CAACF,eAAe,EAAE,IAAI,CAACJ,aAAa,CAACO,gBAAgB,CAAC;MAC5F,CAAC;MACDC,KAAK,EAAGA,KAAK,IAAI;QACfC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD;KACD,CAAC;EACJ;EAEA;EACAE,WAAW,CAACC,OAAY;IACtB,IAAI,CAACR,aAAa,GAAGQ,OAAO;EAC9B;EAEAC,SAAS;IACP,IAAI,IAAI,CAACZ,aAAa,IAAI,IAAI,CAACI,eAAe,GAAG,CAAC,EAAE;MAClD,IAAI,CAACd,WAAW,CAACsB,SAAS,CAAC,IAAI,CAACZ,aAAa,EAAE,IAAI,CAACI,eAAe,CAAC;MACpES,KAAK,CAAC,+BAA+B,CAAC;;EAE1C;CACD;AAjDY3B,gBAAgB,eAL5BD,SAAS,CAAC;EACT6B,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC,CAAC,GACW9B,gBAAgB,CAiD5B;SAjDYA,gBAAgB","names":["Component","DetalleComponent","constructor","route","productosService","cartService","ngOnInit","productId","snapshot","paramMap","get","getProductDetail","subscribe","next","detail","productDetail","pictures","length","selectedImage","desiredQuantity","Math","min","initial_quantity","error","console","selectImage","picture","addToCart","alert","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Desktop\\Archivo\\src\\app\\detalle\\detalle.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { ProductosService } from '../services/productos.service';\nimport { CartService } from '../services/cart.service';\n\n@Component({\n  selector: 'app-detalle',\n  templateUrl: './detalle.component.html',\n  styleUrls: ['./detalle.component.css']\n})\nexport class DetalleComponent {\n  productDetail: any = null; // Store the product details\n  selectedImage: any = null; // Store the selected image\n  maxVisibleImages: number = 3; // Set the maximum number of images to display\n  desiredQuantity: number = 1; // Default value for quantity input\n\n  constructor(\n    private route: ActivatedRoute,\n    private productosService: ProductosService,\n    private cartService: CartService\n  ) {}\n\n  ngOnInit(): void {\n    // Get the product ID from the route parameter and fetch details\n    const productId = this.route.snapshot.paramMap.get('id');\n    if (productId) {\n      this.getProductDetail(productId);\n    }\n  }\n\n  // Method to fetch the product detail using the service\n  getProductDetail(productId: string): void {\n    this.productosService.getProductDetail(productId).subscribe({\n      next: (detail) => {\n        this.productDetail = detail;\n        // Set the initial selected image\n        if (this.productDetail.pictures.length > 0) {\n          this.selectedImage = this.productDetail.pictures[0];\n        }\n        // Ensure desiredQuantity does not exceed initial_quantity\n        this.desiredQuantity = Math.min(this.desiredQuantity, this.productDetail.initial_quantity);\n      },\n      error: (error) => {\n        console.error('Error fetching product details:', error);\n      },\n    });\n  }\n\n  // Method to handle image selection\n  selectImage(picture: any): void {\n    this.selectedImage = picture;\n  }\n\n  addToCart(): void {\n    if (this.productDetail && this.desiredQuantity > 0) {\n      this.cartService.addToCart(this.productDetail, this.desiredQuantity);\n      alert('Producto agregado al carrito!');\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}