{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = [];\n    this.savedItems = [];\n    this.initialQuantities = {}; // Store initial quantities of products\n  }\n  // Add a product to the cart\n  addToCart(product, quantity) {\n    const existingProduct = this.cart.find(item => item.product.id === product.id);\n    if (existingProduct) {\n      existingProduct.quantity += quantity;\n    } else {\n      this.cart.push({\n        product,\n        quantity\n      });\n    }\n    // Save the initial quantity if not already saved\n    if (!this.initialQuantities[product.id]) {\n      this.initialQuantities[product.id] = product.initial_quantity;\n    }\n  }\n  // Get the current cart\n  getCart() {\n    return this.cart;\n  }\n  // Get a summary of the cart\n  getCartSummary() {\n    const numberOfProducts = this.cart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = this.cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n    return {\n      numberOfProducts,\n      totalPrice\n    };\n  }\n  // Update the cart with new items\n  updateCart(cart) {\n    this.cart = cart;\n  }\n  // Save an item to the saved items list\n  saveItem(item) {\n    this.savedItems.push(item);\n  }\n  // Get the list of saved items\n  getSavedItems() {\n    return this.savedItems;\n  }\n  // Update the list of saved items\n  updateSavedItems(savedItems) {\n    this.savedItems = savedItems;\n  }\n  // Update the quantity of a product in the cart\n  updateProductQuantity(productId, newQuantity) {\n    const product = this.cart.find(item => item.product.id === productId);\n    if (product) {\n      product.quantity = newQuantity;\n    }\n  }\n  // Reduce the stock of products based on the quantities bought when \"Pagar\" is clicked\n  purchaseProducts() {\n    this.cart.forEach(item => {\n      const initialQuantity = this.initialQuantities[item.product.id];\n      const newQuantity = initialQuantity - item.quantity;\n      // Update the initial quantity after purchase\n      this.initialQuantities[item.product.id] = newQuantity;\n      // Log or handle the updated quantity as needed, e.g., send it to the backend\n      console.log(`Product ID: ${item.product.id}, New Stock: ${newQuantity}`);\n    });\n    // Clear the cart after purchase\n    this.cart = [];\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAHxBC;IAIU,SAAI,GAAU,EAAE;IAChB,eAAU,GAAU,EAAE;IACtB,sBAAiB,GAAoC,EAAE,CAAC,CAAC;;EAEjE;EACAC,SAAS,CAACC,OAAY,EAAEC,QAAgB;IACtC,MAAMC,eAAe,GAAG,IAAI,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAC9E,IAAIJ,eAAe,EAAE;MACnBA,eAAe,CAACD,QAAQ,IAAIA,QAAQ;KACrC,MAAM;MACL,IAAI,CAACE,IAAI,CAACI,IAAI,CAAC;QAAEP,OAAO;QAAEC;MAAQ,CAAE,CAAC;;IAEvC;IACA,IAAI,CAAC,IAAI,CAACO,iBAAiB,CAACR,OAAO,CAACM,EAAE,CAAC,EAAE;MACvC,IAAI,CAACE,iBAAiB,CAACR,OAAO,CAACM,EAAE,CAAC,GAAGN,OAAO,CAACS,gBAAgB;;EAEjE;EAEA;EACAC,OAAO;IACL,OAAO,IAAI,CAACP,IAAI;EAClB;EAEA;EACAQ,cAAc;IACZ,MAAMC,gBAAgB,GAAG,IAAI,CAACT,IAAI,CAACU,MAAM,CAAC,CAACC,GAAG,EAAET,IAAI,KAAKS,GAAG,GAAGT,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;IAChF,MAAMc,UAAU,GAAG,IAAI,CAACZ,IAAI,CAACU,MAAM,CAAC,CAACC,GAAG,EAAET,IAAI,KAAKS,GAAG,GAAIT,IAAI,CAACL,OAAO,CAACgB,KAAK,GAAGX,IAAI,CAACJ,QAAS,EAAE,CAAC,CAAC;IACjG,OAAO;MAAEW,gBAAgB;MAAEG;IAAU,CAAE;EACzC;EAEA;EACAE,UAAU,CAACd,IAAW;IACpB,IAAI,CAACA,IAAI,GAAGA,IAAI;EAClB;EAEA;EACAe,QAAQ,CAACb,IAAS;IAChB,IAAI,CAACc,UAAU,CAACZ,IAAI,CAACF,IAAI,CAAC;EAC5B;EAEA;EACAe,aAAa;IACX,OAAO,IAAI,CAACD,UAAU;EACxB;EAEA;EACAE,gBAAgB,CAACF,UAAiB;IAChC,IAAI,CAACA,UAAU,GAAGA,UAAU;EAC9B;EAEA;EACAG,qBAAqB,CAACC,SAAiB,EAAEC,WAAmB;IAC1D,MAAMxB,OAAO,GAAG,IAAI,CAACG,IAAI,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKiB,SAAS,CAAC;IACrE,IAAIvB,OAAO,EAAE;MACXA,OAAO,CAACC,QAAQ,GAAGuB,WAAW;;EAElC;EAEA;EACAC,gBAAgB;IACd,IAAI,CAACtB,IAAI,CAACuB,OAAO,CAACrB,IAAI,IAAG;MACvB,MAAMsB,eAAe,GAAG,IAAI,CAACnB,iBAAiB,CAACH,IAAI,CAACL,OAAO,CAACM,EAAE,CAAC;MAC/D,MAAMkB,WAAW,GAAGG,eAAe,GAAGtB,IAAI,CAACJ,QAAQ;MAEnD;MACA,IAAI,CAACO,iBAAiB,CAACH,IAAI,CAACL,OAAO,CAACM,EAAE,CAAC,GAAGkB,WAAW;MAErD;MACAI,OAAO,CAACC,GAAG,CAAC,eAAexB,IAAI,CAACL,OAAO,CAACM,EAAE,gBAAgBkB,WAAW,EAAE,CAAC;IAC1E,CAAC,CAAC;IAEF;IACA,IAAI,CAACrB,IAAI,GAAG,EAAE;EAChB;;AA1EWN,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAiC,SAAXjC,WAAW;EAAAkC,YAFV;AAAM","names":["CartService","constructor","addToCart","product","quantity","existingProduct","cart","find","item","id","push","initialQuantities","initial_quantity","getCart","getCartSummary","numberOfProducts","reduce","sum","totalPrice","price","updateCart","saveItem","savedItems","getSavedItems","updateSavedItems","updateProductQuantity","productId","newQuantity","purchaseProducts","forEach","initialQuantity","console","log","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Desktop\\Archivo\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cart: any[] = [];\r\n  private savedItems: any[] = [];\r\n  private initialQuantities: { [productId: string]: number } = {}; // Store initial quantities of products\r\n\r\n  // Add a product to the cart\r\n  addToCart(product: any, quantity: number): void {\r\n    const existingProduct = this.cart.find(item => item.product.id === product.id);\r\n    if (existingProduct) {\r\n      existingProduct.quantity += quantity;\r\n    } else {\r\n      this.cart.push({ product, quantity });\r\n    }\r\n    // Save the initial quantity if not already saved\r\n    if (!this.initialQuantities[product.id]) {\r\n      this.initialQuantities[product.id] = product.initial_quantity;\r\n    }\r\n  }\r\n\r\n  // Get the current cart\r\n  getCart(): any[] {\r\n    return this.cart;\r\n  }\r\n\r\n  // Get a summary of the cart\r\n  getCartSummary(): { numberOfProducts: number, totalPrice: number } {\r\n    const numberOfProducts = this.cart.reduce((sum, item) => sum + item.quantity, 0);\r\n    const totalPrice = this.cart.reduce((sum, item) => sum + (item.product.price * item.quantity), 0);\r\n    return { numberOfProducts, totalPrice };\r\n  }\r\n\r\n  // Update the cart with new items\r\n  updateCart(cart: any[]): void {\r\n    this.cart = cart;\r\n  }\r\n\r\n  // Save an item to the saved items list\r\n  saveItem(item: any): void {\r\n    this.savedItems.push(item);\r\n  }\r\n\r\n  // Get the list of saved items\r\n  getSavedItems(): any[] {\r\n    return this.savedItems;\r\n  }\r\n\r\n  // Update the list of saved items\r\n  updateSavedItems(savedItems: any[]): void {\r\n    this.savedItems = savedItems;\r\n  }\r\n\r\n  // Update the quantity of a product in the cart\r\n  updateProductQuantity(productId: number, newQuantity: number): void {\r\n    const product = this.cart.find(item => item.product.id === productId);\r\n    if (product) {\r\n      product.quantity = newQuantity;\r\n    }\r\n  }\r\n\r\n  // Reduce the stock of products based on the quantities bought when \"Pagar\" is clicked\r\n  purchaseProducts(): void {\r\n    this.cart.forEach(item => {\r\n      const initialQuantity = this.initialQuantities[item.product.id];\r\n      const newQuantity = initialQuantity - item.quantity;\r\n\r\n      // Update the initial quantity after purchase\r\n      this.initialQuantities[item.product.id] = newQuantity;\r\n\r\n      // Log or handle the updated quantity as needed, e.g., send it to the backend\r\n      console.log(`Product ID: ${item.product.id}, New Stock: ${newQuantity}`);\r\n    });\r\n\r\n    // Clear the cart after purchase\r\n    this.cart = [];\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}