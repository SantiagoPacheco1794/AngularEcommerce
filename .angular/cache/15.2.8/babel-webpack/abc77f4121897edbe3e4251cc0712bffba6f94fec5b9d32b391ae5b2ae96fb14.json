{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class CartService {\n  constructor() {\n    this.cart = [];\n    this.savedItems = [];\n  }\n  // Adds a product to the cart with the specified quantity\n  addToCart(product, quantity) {\n    const existingProduct = this.cart.find(item => item.product.id === product.id);\n    if (existingProduct) {\n      existingProduct.quantity += quantity;\n    } else {\n      this.cart.push({\n        product,\n        quantity\n      });\n    }\n  }\n  // Retrieves the list of cart items\n  getCartItems() {\n    return this.cart;\n  }\n  // Updates the quantity of a specific cart item\n  updateCartItem(updatedItem) {\n    const index = this.cart.findIndex(item => item.product.id === updatedItem.product.id);\n    if (index !== -1) {\n      this.cart[index].quantity = updatedItem.quantity;\n    }\n  }\n  // Removes a product from the cart by index\n  removeCartItem(index) {\n    if (index > -1) {\n      this.cart.splice(index, 1);\n    }\n  }\n  // Saves a product to the saved items list and removes it from the cart\n  saveProduct(item) {\n    this.savedItems.push(item);\n    this.removeCartItem(this.cart.indexOf(item));\n  }\n  // Retrieves the list of saved items\n  getSavedItems() {\n    return this.savedItems;\n  }\n  // Retrieves a summary of the cart with total number of products and total price\n  getCartSummary() {\n    const numberOfProducts = this.cart.reduce((sum, item) => sum + item.quantity, 0);\n    const totalPrice = this.cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\n    return {\n      numberOfProducts,\n      totalPrice\n    };\n  }\n}\nCartService.ɵfac = function CartService_Factory(t) {\n  return new (t || CartService)();\n};\nCartService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CartService,\n  factory: CartService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,WAAW;EAHxBC;IAIU,SAAI,GAAU,EAAE;IAChB,eAAU,GAAU,EAAE;;EAE9B;EACAC,SAAS,CAACC,OAAY,EAAEC,QAAgB;IACtC,MAAMC,eAAe,GAAG,IAAI,CAACC,IAAI,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKN,OAAO,CAACM,EAAE,CAAC;IAC9E,IAAIJ,eAAe,EAAE;MACnBA,eAAe,CAACD,QAAQ,IAAIA,QAAQ;KACrC,MAAM;MACL,IAAI,CAACE,IAAI,CAACI,IAAI,CAAC;QAAEP,OAAO;QAAEC;MAAQ,CAAE,CAAC;;EAEzC;EAEA;EACAO,YAAY;IACV,OAAO,IAAI,CAACL,IAAI;EAClB;EAEA;EACAM,cAAc,CAACC,WAAgB;IAC7B,MAAMC,KAAK,GAAG,IAAI,CAACR,IAAI,CAACS,SAAS,CAACP,IAAI,IAAIA,IAAI,CAACL,OAAO,CAACM,EAAE,KAAKI,WAAW,CAACV,OAAO,CAACM,EAAE,CAAC;IACrF,IAAIK,KAAK,KAAK,CAAC,CAAC,EAAE;MAChB,IAAI,CAACR,IAAI,CAACQ,KAAK,CAAC,CAACV,QAAQ,GAAGS,WAAW,CAACT,QAAQ;;EAEpD;EAEA;EACAY,cAAc,CAACF,KAAa;IAC1B,IAAIA,KAAK,GAAG,CAAC,CAAC,EAAE;MACd,IAAI,CAACR,IAAI,CAACW,MAAM,CAACH,KAAK,EAAE,CAAC,CAAC;;EAE9B;EAEA;EACAI,WAAW,CAACV,IAAS;IACnB,IAAI,CAACW,UAAU,CAACT,IAAI,CAACF,IAAI,CAAC;IAC1B,IAAI,CAACQ,cAAc,CAAC,IAAI,CAACV,IAAI,CAACc,OAAO,CAACZ,IAAI,CAAC,CAAC;EAC9C;EAEA;EACAa,aAAa;IACX,OAAO,IAAI,CAACF,UAAU;EACxB;EAEA;EACAG,cAAc;IACZ,MAAMC,gBAAgB,GAAG,IAAI,CAACjB,IAAI,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEjB,IAAI,KAAKiB,GAAG,GAAGjB,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;IAChF,MAAMsB,UAAU,GAAG,IAAI,CAACpB,IAAI,CAACkB,MAAM,CAAC,CAACC,GAAG,EAAEjB,IAAI,KAAKiB,GAAG,GAAGjB,IAAI,CAACL,OAAO,CAACwB,KAAK,GAAGnB,IAAI,CAACJ,QAAQ,EAAE,CAAC,CAAC;IAC/F,OAAO;MAAEmB,gBAAgB;MAAEG;IAAU,CAAE;EACzC;;AAlDW1B,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA4B,SAAX5B,WAAW;EAAA6B,YAFV;AAAM","names":["CartService","constructor","addToCart","product","quantity","existingProduct","cart","find","item","id","push","getCartItems","updateCartItem","updatedItem","index","findIndex","removeCartItem","splice","saveProduct","savedItems","indexOf","getSavedItems","getCartSummary","numberOfProducts","reduce","sum","totalPrice","price","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Usuario\\Desktop\\Archivo\\src\\app\\services\\cart.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CartService {\r\n  private cart: any[] = [];\r\n  private savedItems: any[] = [];\r\n\r\n  // Adds a product to the cart with the specified quantity\r\n  addToCart(product: any, quantity: number): void {\r\n    const existingProduct = this.cart.find(item => item.product.id === product.id);\r\n    if (existingProduct) {\r\n      existingProduct.quantity += quantity;\r\n    } else {\r\n      this.cart.push({ product, quantity });\r\n    }\r\n  }\r\n\r\n  // Retrieves the list of cart items\r\n  getCartItems(): any[] {\r\n    return this.cart;\r\n  }\r\n\r\n  // Updates the quantity of a specific cart item\r\n  updateCartItem(updatedItem: any): void {\r\n    const index = this.cart.findIndex(item => item.product.id === updatedItem.product.id);\r\n    if (index !== -1) {\r\n      this.cart[index].quantity = updatedItem.quantity;\r\n    }\r\n  }\r\n\r\n  // Removes a product from the cart by index\r\n  removeCartItem(index: number): void {\r\n    if (index > -1) {\r\n      this.cart.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // Saves a product to the saved items list and removes it from the cart\r\n  saveProduct(item: any): void {\r\n    this.savedItems.push(item);\r\n    this.removeCartItem(this.cart.indexOf(item));\r\n  }\r\n\r\n  // Retrieves the list of saved items\r\n  getSavedItems(): any[] {\r\n    return this.savedItems;\r\n  }\r\n\r\n  // Retrieves a summary of the cart with total number of products and total price\r\n  getCartSummary(): { numberOfProducts: number; totalPrice: number } {\r\n    const numberOfProducts = this.cart.reduce((sum, item) => sum + item.quantity, 0);\r\n    const totalPrice = this.cart.reduce((sum, item) => sum + item.product.price * item.quantity, 0);\r\n    return { numberOfProducts, totalPrice };\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}